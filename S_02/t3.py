# Q1

def averager():
    numberss = []
    def inner(a):
        numberss.append(a)
        return sum(numberss) / len(numberss)
    return inner

# ===============================================================
# Q2
import time
def timer():
    st = time.perf_counter()
    def now_t():
        nonlocal st
        en = time.perf_counter()
        all_t = round(en - st)
        return all_t
    return now_t

import time
x = timer()
for i in range(5):
    time.sleep(2)
    print(x())

# ===============================================================
# Q3

# تابعی است که مقادیر موجود در تابع در برگیرنده خود را به خاطر میاورد حتی اگر تابع در برگیرنده از حافظه حذف شود closure
# یعنی با وجود اینکه ما تابع اصلی را حذف کردیم باز هم کلوژر وضعیت و خاسته مارا از برنامه میداند و کار خود را انجام میدهد .
# در واقع مانند یک کلاس که همیشه در پس زمینه برنامه باز است و در مواقع نیاز موارد مورد نیاز را برمیگرداند کلوژر یک فانکشن را در پس زمینه بازنگه میدارد
# و مقادیر درون خود را فراموش نمیکند این عملکرد ان اندکی شبیه جنریتور ها نیز میباشد و از جمله کاربرد های ان در جایگزنینی کلاس هایه ساده
# و اولیه میباشد در نتیجه در یک تعریف کلی کلوژر زمانی به وجود میاید که یک تابع داخلی به مقداری در تابع در برگیرنده اش ارجاع داده میشود
# و از شروط ان وجود دو تابع درون اندرون ،برگرداندن تابع داخلی توسط تابع در برگیرنده و ارجاع متغییر تعریف شده در تابع خارجی توسط تابع داخلی میباشد

